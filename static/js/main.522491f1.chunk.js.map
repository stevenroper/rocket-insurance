{"version":3,"sources":["muiTheme.ts","constants/paths.ts","components/LoadingOverlay.tsx","components/ErrorAlert.tsx","components/FormCard.tsx","services/quotes.ts","services/rq-hooks.ts","utils/format.ts","pages/QuoteOverview/QuoteOverview.tsx","constants/environment.ts","constants/enums.ts","components/layout/Grid.tsx","pages/RatingInformation/RatingInformation.tsx","App.tsx","index.tsx"],"names":["theme","palette","primary","main","secondary","components","MuiButton","defaultProps","color","RATING_INFORMATION","QUOTE_OVERVIEW","LoadingOverlay","message","Box","position","height","width","display","flexDirection","alignItems","justifyContent","zIndex","sx","backdropFilter","backgroundColor","opacity","Typography","variant","textAlign","marginBottom","CircularProgress","ErrorAlert","Alert","severity","FormCard","children","isLoading","loadingMessage","maxWidth","showErrorMessage","Paper","elevation","QUOTES_ENDPOINT","BASE_CONFIG","headers","Accept","handleResponse","res","ok","Error","status","json","createQuote","payload","a","fetch","method","body","JSON","stringify","updateQuote","quoteId","useAppState","queryClient","useQueryClient","clearState","removeQueries","state","useQuery","getQueryData","staleTime","Infinity","cacheTime","data","updateState","newState","setQueryData","formatCurrency","val","maximumFractionDigits","isNaN","toLocaleString","style","currency","PolicyCoverageVariableSelect","disabled","name","onChange","control","useFormContext","render","field","FormControl","fullWidth","InputLabel","id","quote","variable_options","title","Select","labelId","label","e","target","value","values","map","MenuItem","component","description","QuotingOverview","useMutation","newVariableSelections","rating_address","policy_holder","variable_selections","onSuccess","useUpdateQuote","isError","mutate","push","useHistory","useFormMethods","useForm","defaultValues","deductible","asteroid_collision","useTheme","padding","border","grey","marginY","fontWeight","premium","margin","Button","onClick","process","to","US_STATES","fullName","code","Grid","rest","gap","RATING_INFO_FORM_KEYS","GridTextField","gridArea","errors","formState","errorMessage","TextField","error","Boolean","helperText","GridSectionTitle","formValidation","yup","required","matches","RatingInformation","useCreateQuote","resolver","yupResolver","stateSelectError","onSubmit","handleSubmit","first_name","last_name","address","line_1","line_2","city","region","postal","gridTemplateColumns","xs","md","gridTemplateAreas","MenuProps","PaperProps","maxHeight","FormHelperText","marginTop","type","isSubmitted","isValid","App","minHeight","fontSize","path","paths","QuoteOverview","QueryClient","ReactDOM","StrictMode","client","ThemeProvider","createTheme","muiTheme","document","getElementById"],"mappings":"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","file":"static/js/main.522491f1.chunk.js","sourcesContent":["import { ThemeOptions } from '@mui/material/styles';\n\nconst DARK_GREEN = '#214e34';\nconst ORANGE = '#ffa000';\n\nconst theme: ThemeOptions = {\n  palette: {\n    primary: { main: DARK_GREEN },\n    secondary: { main: ORANGE },\n  },\n  components: {\n    MuiButton: {\n      defaultProps: {\n        color: 'secondary',\n      },\n    },\n  },\n};\n\nexport default theme;\n","export const RATING_INFORMATION = '/rating-information';\nexport const QUOTE_OVERVIEW = '/quote-overview';\n","import Box from '@mui/material/Box';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\n\ninterface LoadingOverlayProps {\n  message?: string;\n}\n\nconst LoadingOverlay = ({ message }: LoadingOverlayProps) => (\n  <Box\n    position=\"absolute\"\n    height=\"100%\"\n    width=\"100%\"\n    display=\"flex\"\n    flexDirection=\"column\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    zIndex=\"100\"\n    sx={{ backdropFilter: 'blur(5px)' }}\n  >\n    <Box\n      height=\"100%\"\n      width=\"100%\"\n      sx={{ backgroundColor: 'white', opacity: 0.75, position: 'absolute' }}\n    />\n    {message && (\n      <Typography\n        variant=\"h5\"\n        textAlign=\"center\"\n        zIndex=\"200\"\n        marginBottom=\"1rem\"\n      >\n        {message}\n      </Typography>\n    )}\n    <CircularProgress />\n  </Box>\n);\n\nexport default LoadingOverlay;\n","import Alert from '@mui/material/Alert';\n\nconst ErrorAlert = () => (\n  <Alert severity=\"error\">\n    Oops, something went wrong. Please try again later!\n  </Alert>\n);\n\nexport default ErrorAlert;\n","import { FC } from 'react';\n\nimport Paper from '@mui/material/Paper';\n\nimport LoadingOverlay from 'components/LoadingOverlay';\nimport ErrorAlert from 'components/ErrorAlert';\n\ninterface FormCardProps {\n  isLoading?: boolean;\n  loadingMessage?: string;\n  maxWidth: string;\n  showErrorMessage?: boolean;\n}\n\nconst FormCard: FC<FormCardProps> = ({\n  children,\n  isLoading = false,\n  loadingMessage = '',\n  maxWidth,\n  showErrorMessage = false,\n}) => (\n  <Paper\n    elevation={1}\n    sx={{\n      width: '100%',\n      maxWidth,\n      position: 'relative',\n    }}\n  >\n    {showErrorMessage && <ErrorAlert />}\n    {isLoading && <LoadingOverlay message={loadingMessage} />}\n    {children}\n  </Paper>\n);\n\nexport default FormCard;\n","const QUOTES_ENDPOINT = 'https://fed-challenge-api.sure.now.sh/api/v1/quotes';\nconst BASE_CONFIG = {\n  headers: {\n    Accept: 'application/json',\n  },\n};\n\ninterface PolicyHolder {\n  first_name: string;\n  last_name: string;\n}\n\ninterface Address {\n  line_1: string;\n  line_2?: string;\n  city: string;\n  region: string;\n  postal: string;\n}\n\ninterface VariableOption {\n  title: string;\n  description: string;\n  values: number[];\n}\n\ninterface VariableSelections {\n  deductible: number;\n  asteroid_collision: number;\n}\n\nexport type CreateQuotePayload = PolicyHolder & {\n  address: Address;\n};\n\nexport interface UpdateQuotePayload {\n  quote: {\n    quoteId: string;\n    rating_address: Address;\n    policy_holder: PolicyHolder;\n    variable_selections: VariableSelections;\n  };\n}\n\nexport interface QuoteResponse {\n  quote: {\n    quoteId: string;\n    rating_address: Required<Address>;\n    policy_holder: PolicyHolder;\n    variable_options: {\n      deductible: VariableOption;\n      asteroid_collision: VariableOption;\n    };\n    variable_selections: VariableSelections;\n    premium: number;\n  };\n}\n\nconst handleResponse = (res: Response) => {\n  if (!res.ok) throw new Error(`Network error: ${res.status}`);\n  return res.json();\n};\n\nexport const createQuote = async (\n  payload: CreateQuotePayload\n): Promise<QuoteResponse> => {\n  const res = await fetch(QUOTES_ENDPOINT, {\n    ...BASE_CONFIG,\n    method: 'POST',\n    body: JSON.stringify(payload),\n  });\n  return handleResponse(res);\n};\n\nexport const updateQuote = async (\n  quoteId: string,\n  payload: UpdateQuotePayload\n): Promise<QuoteResponse> => {\n  const res = await fetch(`${QUOTES_ENDPOINT}/${quoteId}`, {\n    ...BASE_CONFIG,\n    method: 'PUT',\n    body: JSON.stringify(payload),\n  });\n  return handleResponse(res);\n};\n","import { useQuery, useQueryClient, useMutation } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nimport { QUOTE_OVERVIEW } from 'constants/paths';\n\nimport {\n  createQuote,\n  CreateQuotePayload,\n  QuoteResponse,\n  updateQuote,\n  UpdateQuotePayload,\n} from './quotes';\n\nexport const useAppState = (): {\n  state: QuoteResponse | undefined;\n  updateState: (newData: QuoteResponse) => void;\n  clearState: () => void;\n} => {\n  const queryClient = useQueryClient();\n  const { data: state } = useQuery(\n    'quote',\n    () => queryClient.getQueryData<QuoteResponse>('quote'),\n    { staleTime: Infinity, cacheTime: Infinity }\n  );\n  const updateState = (newState: any) =>\n    queryClient.setQueryData('quote', newState);\n  const clearState = () => queryClient.removeQueries('quote');\n\n  return { clearState, state, updateState };\n};\n\nexport const useCreateQuote = () => {\n  const { push } = useHistory();\n  const { updateState } = useAppState();\n\n  return useMutation<QuoteResponse, unknown, CreateQuotePayload, unknown>(\n    createQuote,\n    {\n      onSuccess: (data) => {\n        updateState(data);\n        push(QUOTE_OVERVIEW);\n      },\n    }\n  );\n};\n\nexport type UpdateQuoteCoverageVariableKeys =\n  | 'deductible'\n  | 'asteroid_collision';\nexport type UseUpdateQuotePayload = Record<\n  UpdateQuoteCoverageVariableKeys,\n  number\n>;\n\nexport const useUpdateQuote = () => {\n  const { state, updateState } = useAppState();\n\n  return useMutation<QuoteResponse, unknown, UseUpdateQuotePayload, unknown>(\n    (newVariableSelections) =>\n      // TODO update to remove casting\n      updateQuote(\n        state?.quote?.quoteId as string,\n        {\n          quote: {\n            quoteId: state?.quote?.quoteId,\n            rating_address: state?.quote?.rating_address,\n            policy_holder: state?.quote?.policy_holder,\n            variable_selections: {\n              ...state?.quote?.variable_selections,\n              ...newVariableSelections,\n            },\n          },\n        } as UpdateQuotePayload\n      ),\n    {\n      onSuccess: (data) => updateState(data),\n    }\n  );\n};\n","export const formatCurrency = (val: number, maximumFractionDigits = 0) => {\n  if (isNaN(val)) return val;\n  return val.toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits,\n  });\n};\n","import { Redirect, useHistory } from 'react-router-dom';\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from 'react-hook-form';\nimport { DevTool as ReactHookFormDevtools } from '@hookform/devtools';\n\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { grey } from '@mui/material/colors';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Button from '@mui/material/Button';\nimport { useTheme } from '@mui/material/styles';\n\nimport FormCard from 'components/FormCard';\n\nimport { RATING_INFORMATION } from 'constants/paths';\nimport { IS_DEV } from 'constants/environment';\n\nimport {\n  useAppState,\n  useUpdateQuote,\n  UpdateQuoteCoverageVariableKeys,\n  UseUpdateQuotePayload,\n} from 'services/rq-hooks';\n\nimport { formatCurrency } from 'utils/format';\n\ninterface QuotingOverviewFormData {\n  deductible: number;\n  asteroid_collision: number;\n}\n\nconst QuotingOverview = () => {\n  const { clearState, state } = useAppState();\n  const { isError, isLoading, mutate: updateQuote } = useUpdateQuote();\n  const { push } = useHistory();\n  const useFormMethods = useForm<QuotingOverviewFormData>({\n    defaultValues: {\n      deductible: state?.quote?.variable_selections?.deductible,\n      asteroid_collision: state?.quote?.variable_selections?.asteroid_collision,\n    },\n  });\n  const theme = useTheme();\n\n  if (!state?.quote) return <Redirect to={RATING_INFORMATION} />;\n\n  return (\n    <>\n      <FormCard\n        isLoading={isLoading}\n        loadingMessage=\"Updating quote\"\n        maxWidth=\"30rem\"\n        showErrorMessage={isError}\n      >\n        <Box padding=\"2rem 1.5rem\">\n          <Typography variant=\"h4\" component=\"h2\" textAlign=\"center\">\n            Your Quote\n          </Typography>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            padding=\"1rem\"\n            border={`1px solid ${grey[300]}`}\n            marginY=\"1rem\"\n          >\n            <Typography variant=\"h5\" component=\"h3\" marginBottom=\"0.5rem\">\n              Yearly Premium\n            </Typography>\n            <Typography\n              variant=\"h3\"\n              component=\"p\"\n              fontWeight=\"500\"\n              color={theme.palette.primary.main}\n            >\n              {formatCurrency(state?.quote?.premium)}\n            </Typography>\n          </Box>\n          <Typography\n            variant=\"h6\"\n            component=\"h3\"\n            margin=\"2rem 0 1rem 0\"\n            textAlign=\"center\"\n          >\n            Adjust policy coverage variables\n          </Typography>\n          <FormProvider {...useFormMethods}>\n            <PolicyCoverageVariableSelect\n              name=\"deductible\"\n              onChange={updateQuote}\n              disabled={isLoading}\n            />\n            <PolicyCoverageVariableSelect\n              name=\"asteroid_collision\"\n              onChange={updateQuote}\n              disabled={isLoading}\n            />\n          </FormProvider>\n          <Box display=\"flex\" justifyContent=\"center\">\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                push(RATING_INFORMATION);\n                clearState();\n              }}\n            >\n              Restart quote\n            </Button>\n          </Box>\n        </Box>\n      </FormCard>\n      {IS_DEV && <ReactHookFormDevtools control={useFormMethods.control} />}\n    </>\n  );\n};\n\ninterface PolicyCoverageVariableSelectProps {\n  disabled?: boolean;\n  name: UpdateQuoteCoverageVariableKeys;\n  onChange(data: UseUpdateQuotePayload): void;\n}\n\nconst PolicyCoverageVariableSelect = ({\n  disabled = false,\n  name,\n  onChange,\n}: PolicyCoverageVariableSelectProps) => {\n  const { control } = useFormContext<QuotingOverviewFormData>();\n  const { state } = useAppState();\n\n  return (\n    <>\n      <Controller\n        name={name}\n        control={control}\n        render={({ field }) => (\n          <FormControl fullWidth sx={{ marginBottom: '0.5rem' }}>\n            <InputLabel id={`${name}-select`}>\n              {state?.quote?.variable_options?.[name]?.title}\n            </InputLabel>\n            <Select\n              labelId={`${name}-select`}\n              label={state?.quote?.variable_options?.[name]?.title}\n              disabled={disabled}\n              {...field}\n              onChange={(e) => {\n                field.onChange(e);\n                // TODO fix to remove casting\n                onChange({ [name]: e.target.value } as UseUpdateQuotePayload);\n              }}\n            >\n              {(state?.quote?.variable_options?.[name]?.values ?? []).map(\n                (val) => (\n                  <MenuItem key={val} value={val}>\n                    {formatCurrency(val)}\n                  </MenuItem>\n                )\n              )}\n            </Select>\n          </FormControl>\n        )}\n      />\n      <Typography variant=\"caption\" component=\"p\" marginBottom=\"2rem\">\n        {state?.quote?.variable_options?.[name]?.description}\n      </Typography>\n    </>\n  );\n};\n\nexport default QuotingOverview;\n","export const IS_DEV = process.env.NODE_ENV === 'development';\n","export const US_STATES = [\n  { fullName: 'Alabama', code: 'AL' },\n  { fullName: 'Alaska', code: 'AK' },\n  { fullName: 'Arizona', code: 'AZ' },\n  { fullName: 'Arkansas', code: 'AR' },\n  { fullName: 'California', code: 'CA' },\n  { fullName: 'Colorado', code: 'CO' },\n  { fullName: 'Connecticut', code: 'CT' },\n  { fullName: 'Delaware', code: 'DE' },\n  { fullName: 'District of Columbia', code: 'DC' },\n  { fullName: 'Florida', code: 'FL' },\n  { fullName: 'Georgia', code: 'GA' },\n  { fullName: 'Hawaii', code: 'HI' },\n  { fullName: 'Idaho', code: 'ID' },\n  { fullName: 'Illinois', code: 'IL' },\n  { fullName: 'Indiana', code: 'IN' },\n  { fullName: 'Iowa', code: 'IA' },\n  { fullName: 'Kansas', code: 'KS' },\n  { fullName: 'Kentucky', code: 'KY' },\n  { fullName: 'Louisiana', code: 'LA' },\n  { fullName: 'Maine', code: 'ME' },\n  { fullName: 'Maryland', code: 'MD' },\n  { fullName: 'Massachusetts', code: 'MA' },\n  { fullName: 'Michigan', code: 'MI' },\n  { fullName: 'Minnesota', code: 'MN' },\n  { fullName: 'Mississippi', code: 'MS' },\n  { fullName: 'Missouri', code: 'MO' },\n  { fullName: 'Montana', code: 'MT' },\n  { fullName: 'Nebraska', code: 'NE' },\n  { fullName: 'Nevada', code: 'NV' },\n  { fullName: 'New Hampshire', code: 'NH' },\n  { fullName: 'New Jersey', code: 'NJ' },\n  { fullName: 'New Mexico', code: 'NM' },\n  { fullName: 'New York', code: 'NY' },\n  { fullName: 'North Carolina', code: 'NC' },\n  { fullName: 'North Dakota', code: 'ND' },\n  { fullName: 'Ohio', code: 'OH' },\n  { fullName: 'Oklahoma', code: 'OK' },\n  { fullName: 'Oregon', code: 'OR' },\n  { fullName: 'Pennsylvania', code: 'PA' },\n  { fullName: 'Rhode Island', code: 'RI' },\n  { fullName: 'South Carolina', code: 'SC' },\n  { fullName: 'South Dakota', code: 'SD' },\n  { fullName: 'Tennessee', code: 'TN' },\n  { fullName: 'Texas', code: 'TX' },\n  { fullName: 'Utah', code: 'UT' },\n  { fullName: 'Vermont', code: 'VT' },\n  { fullName: 'Virginia', code: 'VA' },\n  { fullName: 'Washington', code: 'WA' },\n  { fullName: 'West Virginia', code: 'WV' },\n  { fullName: 'Wisconsin', code: 'WI' },\n  { fullName: 'Wyoming', code: 'WY' },\n];\n","import { FC } from 'react';\n\nimport Box, { BoxProps } from '@mui/material/Box';\n\nconst Grid: FC<BoxProps> = ({ children, ...rest }) => (\n  <Box display=\"grid\" gap=\"1rem\" {...rest}>\n    {children}\n  </Box>\n);\n\nexport default Grid;\n","import { FC } from 'react';\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from 'react-hook-form';\nimport { DevTool as ReactHookFormDevtools } from '@hookform/devtools';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport Box from '@mui/material/Box';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\n\nimport FormCard from 'components/FormCard';\n\nimport { IS_DEV } from 'constants/environment';\nimport { US_STATES } from 'constants/enums';\n\nimport Grid from 'components/layout/Grid';\n\nimport { useCreateQuote } from 'services/rq-hooks';\n\nconst RATING_INFO_FORM_KEYS = {\n  firstName: 'firstName',\n  lastName: 'lastName',\n  line1: 'line1',\n  line2: 'line2',\n  city: 'city',\n  state: 'state',\n  zipCode: 'zipCode',\n} as const;\n\ntype RatingInformationFormData = Record<\n  typeof RATING_INFO_FORM_KEYS[keyof typeof RATING_INFO_FORM_KEYS],\n  string\n>;\n\nconst RatingInformation = () => {\n  const { mutate: createQuote, isLoading, isError } = useCreateQuote();\n  const useFormMethods = useForm<RatingInformationFormData>({\n    defaultValues: {\n      [RATING_INFO_FORM_KEYS.firstName]: '',\n      [RATING_INFO_FORM_KEYS.lastName]: '',\n      [RATING_INFO_FORM_KEYS.line1]: '',\n      [RATING_INFO_FORM_KEYS.line2]: '',\n      [RATING_INFO_FORM_KEYS.city]: '',\n      [RATING_INFO_FORM_KEYS.state]: '',\n      [RATING_INFO_FORM_KEYS.zipCode]: '',\n    },\n    resolver: yupResolver(formValidation),\n  });\n  const stateSelectError =\n    useFormMethods?.formState?.errors?.[RATING_INFO_FORM_KEYS.state]?.message;\n\n  return (\n    <>\n      <FormCard\n        isLoading={isLoading}\n        loadingMessage=\"Generating quote\"\n        maxWidth=\"40rem\"\n        showErrorMessage={isError}\n      >\n        <FormProvider {...useFormMethods}>\n          <form\n            onSubmit={useFormMethods.handleSubmit((data) =>\n              createQuote({\n                first_name: data[RATING_INFO_FORM_KEYS.firstName],\n                last_name: data[RATING_INFO_FORM_KEYS.lastName],\n                address: {\n                  line_1: data[RATING_INFO_FORM_KEYS.line1],\n                  line_2: data[RATING_INFO_FORM_KEYS.line2],\n                  city: data[RATING_INFO_FORM_KEYS.city],\n                  region: data[RATING_INFO_FORM_KEYS.state],\n                  postal: data[RATING_INFO_FORM_KEYS.zipCode],\n                },\n              })\n            )}\n          >\n            <Grid\n              padding=\"2rem 1.5rem\"\n              gridTemplateColumns={{\n                xs: '1fr',\n                md: '1fr 1fr',\n              }}\n              gridTemplateAreas={{\n                xs: `\n                \"nameTitle\"\n                \"firstName\"\n                \"lastName\"\n                \"addressTitle\"\n                \"line1\"\n                \"line2\"\n                \"city\"\n                \"state\"\n                \"zipCode\"\n                \"submitButton\"\n              `,\n                md: `\n                \"nameTitle nameTitle\"\n                \"firstName lastName\"\n                \"addressTitle addressTitle\"\n                \"line1 line1\"\n                \"line2 city\"\n                \"state zipCode\"\n                \"submitButton submitButton\"\n              `,\n              }}\n            >\n              <GridSectionTitle gridArea=\"nameTitle\">Name</GridSectionTitle>\n              <GridTextField\n                label=\"First name\"\n                gridArea=\"firstName\"\n                name={RATING_INFO_FORM_KEYS.firstName}\n                disabled={isLoading}\n              />\n              <GridTextField\n                label=\"Last name\"\n                gridArea=\"lastName\"\n                name={RATING_INFO_FORM_KEYS.lastName}\n                disabled={isLoading}\n              />\n              <GridSectionTitle gridArea=\"addressTitle\">\n                Address\n              </GridSectionTitle>\n              <GridTextField\n                label=\"Street address\"\n                gridArea=\"line1\"\n                name={RATING_INFO_FORM_KEYS.line1}\n                disabled={isLoading}\n              />\n              <GridTextField\n                label=\"Apartment, unit, suite\"\n                gridArea=\"line2\"\n                name={RATING_INFO_FORM_KEYS.line2}\n                disabled={isLoading}\n              />\n              <GridTextField\n                label=\"City\"\n                gridArea=\"city\"\n                name={RATING_INFO_FORM_KEYS.city}\n                disabled={isLoading}\n              />\n              <Controller\n                name={RATING_INFO_FORM_KEYS.state}\n                control={useFormMethods.control}\n                render={({ field }) => (\n                  <FormControl>\n                    <InputLabel id=\"state-dropdown\">State</InputLabel>\n                    <Select\n                      labelId=\"state-dropdown\"\n                      label=\"State\"\n                      error={Boolean(stateSelectError)}\n                      MenuProps={{ PaperProps: { sx: { maxHeight: '20rem' } } }}\n                      {...field}\n                    >\n                      {US_STATES.map((state) => (\n                        <MenuItem key={state.code} value={state.code}>\n                          {state.fullName}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    {Boolean(stateSelectError) && (\n                      <FormHelperText error>{stateSelectError}</FormHelperText>\n                    )}\n                  </FormControl>\n                )}\n              />\n              <GridTextField\n                label=\"Zip code\"\n                gridArea=\"zipCode\"\n                name={RATING_INFO_FORM_KEYS.zipCode}\n                disabled={isLoading}\n              />\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                marginTop=\"1rem\"\n                sx={{\n                  gridArea: 'submitButton',\n                }}\n              >\n                <Button\n                  variant=\"contained\"\n                  type=\"submit\"\n                  sx={{ width: { xs: '100%', md: 'fit-content' } }}\n                  disabled={\n                    isLoading ||\n                    (useFormMethods.formState.isSubmitted &&\n                      !useFormMethods.formState.isValid)\n                  }\n                >\n                  Get quote\n                </Button>\n              </Box>\n            </Grid>\n          </form>\n        </FormProvider>\n      </FormCard>\n      {IS_DEV && <ReactHookFormDevtools control={useFormMethods.control} />}\n    </>\n  );\n};\n\ntype PropsWithGridArea<TProps> = TProps & {\n  gridArea: string;\n};\n\ntype GridTextFieldProps = TextFieldProps & {\n  name: string;\n};\n\nconst GridTextField = ({\n  gridArea,\n  name,\n  ...rest\n}: PropsWithGridArea<GridTextFieldProps>) => {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n  const errorMessage = errors?.[name]?.message;\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field }) => (\n        <TextField\n          variant=\"outlined\"\n          error={Boolean(errorMessage)}\n          helperText={errorMessage}\n          sx={{ gridArea }}\n          {...field}\n          {...rest}\n        />\n      )}\n    />\n  );\n};\n\nconst GridSectionTitle: FC<PropsWithGridArea<TypographyProps>> = ({\n  children,\n  gridArea,\n  ...rest\n}) => (\n  <Typography variant=\"h6\" component=\"h2\" sx={{ gridArea }}>\n    {children}\n  </Typography>\n);\n\nconst formValidation = yup.object({\n  [RATING_INFO_FORM_KEYS.firstName]: yup\n    .string()\n    .required('Please enter a first name to continue.'),\n  [RATING_INFO_FORM_KEYS.lastName]: yup\n    .string()\n    .required('Please enter a last name to continue.'),\n  [RATING_INFO_FORM_KEYS.line1]: yup\n    .string()\n    .required('Please enter a street address to continue.'),\n  [RATING_INFO_FORM_KEYS.line2]: yup.string(),\n  [RATING_INFO_FORM_KEYS.city]: yup\n    .string()\n    .required('Please enter a city to continue.'),\n  [RATING_INFO_FORM_KEYS.state]: yup\n    .string()\n    .required('Please select a state to continue.'),\n  [RATING_INFO_FORM_KEYS.zipCode]: yup\n    .string()\n    .matches(/^\\d{5}$/, 'Please enter a valid, 5-digit zip code to continue.')\n    .required('Please enter a zip code to continue.'),\n});\n\nexport default RatingInformation;\n","import { Switch, Route, Redirect } from 'react-router-dom';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { useTheme } from '@mui/material/styles';\n\nimport * as paths from 'constants/paths';\n\nimport QuoteOverview from 'pages/QuoteOverview';\nimport RatingInformation from 'pages/RatingInformation';\n\nfunction App() {\n  const theme = useTheme();\n  return (\n    <Box\n      minHeight=\"calc(100vh - 2rem)\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      padding=\"1rem\"\n      sx={{\n        backgroundColor: theme.palette.primary.main,\n      }}\n    >\n      <Typography fontSize=\"3rem\">🚀</Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h2\"\n        fontWeight=\"700\"\n        marginBottom=\"1rem\"\n        color={theme.palette.secondary.main}\n        textAlign=\"center\"\n      >\n        Rocket Insurance\n      </Typography>\n      <Switch>\n        <Route path={paths.RATING_INFORMATION} component={RatingInformation} />\n        <Route path={paths.QUOTE_OVERVIEW} component={QuoteOverview} />\n        <Route path=\"*\">\n          <Redirect to=\"/rating-information\" />\n        </Route>\n      </Switch>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport ThemeProvider from '@mui/material/styles/ThemeProvider';\nimport { createTheme } from '@mui/material/styles';\n\nimport muiTheme from './muiTheme';\n\nimport App from './App';\nimport 'index.css';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider theme={createTheme(muiTheme)}>\n          <App />\n        </ThemeProvider>\n        <ReactQueryDevtools />\n      </QueryClientProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}